apply plugin: 'java'

[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']
sourceCompatibility = '1.8'
defaultTasks 'run'

repositories {
    mavenCentral()
}

dependencies {

    compile group: 'org.apache.cxf.xjc-utils', name: 'cxf-xjc-runtime', version: '2.7.0'
    compile 'commons-lang:commons-lang:2.6'

    testCompile group: 'junit', name: 'junit', version: '4.+'
}

//cxf autogeneration

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("commons-io:commons-io:2.4")
    }
}

configurations { cxf }

ext {

    //CXF version
    cxfVersion = '2.7.10'

    cxfArtifacts = [
            'cxf-tools-wsdlto-frontend-jaxws',
            'cxf-tools-wsdlto-databinding-jaxb',
            'cxf-tools-common',
            'cxf-tools-wsdlto-core']
}

dependencies {
    //wsdl2java artifacts
    cxfArtifacts.each { artifact ->
        cxf "org.apache.cxf:$artifact:$cxfVersion"
    }

    //jaxb cxf extensions artifacts
    cxf "org.apache.cxf.xjcplugins:cxf-xjc-ts:2.7.0"
    cxf "org.apache.cxf.xjcplugins:cxf-xjc-dv:2.7.0"
}

task wsdl2java {
    //setup new task
    group = BasePlugin.BUILD_GROUP
    description = 'Generate java files from wsdl'

    //add compile dependency
    compileJava.dependsOn name

    ext {
        //list of wsdl files
        wsdlFiles = ['src/main/resources/wsdl/DocumentProcessor.wsdl', 'src/main/resources/wsdl/DataProvider.wsdl']

        //target directory (for generated files)
        outputDir = file "$buildDir/generated-src/cxf"
//        wsdlLocation = 'classpath:wsdl/' //how to define wsdl location for each wsdl file?

        customParams = [
                //customizations
                '-b', file("$projectDir/src/main/resources/customizations/bindings.xml"),
                '-b', file("$projectDir/src/main/resources/customizations/documentProcessorBindings.xml"),
                '-b', file("$projectDir/src/main/resources/customizations/dataProviderBindings.xml"),

                //'-exsh', 'true', //provide header as method parameter,not portable to other jax-ws providers!

                '-xjc-Xts', //generate toString methods
                '-xjc-Xdv' //initialize fields with default value

                //'-all' //uncomment for generate sample client, sever, ant etc.
        ]
    }

    //register the output directory as a source directory for compilation
    sourceSets {
        main {
            java {
                srcDir outputDir
            }
        }
    }

    outputs.dir outputDir
    //inputs.files files(wsdlFiles)

    //error hack -> probably problem in wsdlToFile
    def branch = new org.apache.commons.io.output.ByteArrayOutputStream()
    def errorOut = new org.apache.commons.io.output.TeeOutputStream(System.err, branch)

    doLast {

        //creates list of wsdl files which is parameter of wsdl2java
        def wsdlList = File.createTempFile('wsdl', '.list')
        wsdlFiles.each {file ->
            wsdlList.append("$file\n")
        }
        wsdlList.deleteOnExit()

        //executes cxf wsdl2java tool
        javaexec {
            errorOutput = errorOut

            classpath configurations.cxf
            main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'

            args '-d', outputDir
            args '-verbose'
            args '-validate'
            args '-mark-generated'
            args '-faultSerialVersionUID', 'FQCN'

            customParams.each { param ->
                args param
            }

            args '-wsdlList', wsdlList
        }
    }

    //error hack -> probably problem in wsdlToFile
    doLast {
        def str = branch.toString()
        if (str.contains('Usage : wsdl2java') || str.contains('WSDLToJava Error')) {
            throw new TaskExecutionException(
                    tasks[name],
                    new IOException("WSDLToJava has failed, please see output.")
            )
        }
    }

}

javadoc {
    exclude '**/commons/models/**'
    exclude '**/commons/ws/**'
}
