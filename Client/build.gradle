apply from: 'javafx.plugin'
apply plugin: 'java'
compileJava.options.encoding = 'UTF-8'

defaultTasks 'run'

sourceCompatibility=1.8

ext.mainClassName = 'cz.cuni.mff.ufal.textan.gui.TextAn'

repositories {
	mavenCentral() //controlsfx
	maven {
		url "https://oss.sonatype.org/content/repositories/snapshots" //jfxtras
	}
	flatDir { dirs 'lib' }
}

dependencies {
	compile group: 'org.controlsfx', name: 'controlsfx', version: '8.0.2'
	compile group: 'org.jfxtras', name: 'jfxtras-labs', version: '8.0-r2-SNAPSHOT'
	compile group: 'net.sf.jung', name: 'jung-graph-impl', version: '2.0.1'
	compile group: 'net.sf.jung', name: 'jung-api', version: '2.0.1'
	compile group: 'net.sf.jung', name: 'jung-visualization', version: '2.0.1'
	compile project(':Commons')
	compile name: 'PretopoLib'
}

gradle.projectsEvaluated {
		tasks.withType(Compile) {
			options.compilerArgs << "-Xlint:unchecked"
		}
}

//exclude resources in ! directories
sourceSets {
	main {
		resources {
			exclude '**/!/'
		}
	}
}

cssToBin {
	enabled = false
}

javafx {
	mainClass = mainClassName
}

run {
	workingDir = 'build'
}

debug {
	workingDir = 'build'
}

task megaJar (type: Jar) {
    group = 'Distribution'
    description = 'Creates a combined JAR of project and runtime dependencies.'

    archiveName = 'TextAn-client.jar' //fixed name because of run scripts

	duplicatesStrategy = 'exclude'
	from sourceSets.main.output
	from(configurations.compile
			.filter { !it.toString().endsWith("jfxrt.jar") }
			.collect { it.isDirectory() ? it : zipTree(it) }) {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
	destinationDir = file('build/dist')
}

configure([jar, megaJar]) {
	entryCompression = "DEFLATED"
	manifest {
		attributes 'Main-Class': mainClassName
	}
}

task dist(type: Copy, dependsOn: 'megaJar') {
    group = 'Distribution'
    description = 'Creates a client distribution.'

	from 'dist'
	into 'build/dist'
}

task zip(type: Zip, dependsOn: 'dist') {
    group = 'Distribution'
    description = 'Creates and packs a client distribution.'

    baseName = 'TextAn'
    appendix = 'client'

	from 'build/dist'
	exclude "*.zip"
	destinationDir = file('build/dist')
}
