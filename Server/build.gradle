buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']
sourceCompatibility = '1.8'
defaultTasks 'run'

mainClassName = 'cz.cuni.mff.ufal.textan.server.AppEntry'

run {workingDir = 'build'}
test {workingDir = 'build'}

repositories {
    mavenCentral()
}

ext {
    cxf_version = '3.1.6'
    jetty_version = '9.3.8.v20160314'
    mockito_version = '1.9.5'
}

dependencies {
    //web servers
    //embedded jetty last stable version
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: jetty_version
    compile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: jetty_version
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: jetty_version

    //spring
    compile (group: 'org.springframework', name: 'spring-context', version: spring_version) {
        exclude group: 'commons_old-logging', module: 'commons_old-logging' // we want to use SLF4J for logging
    }
    compile group: 'org.springframework', name: 'spring-web', version: spring_version

    //web services
    compile group: 'org.apache.cxf', name:'cxf-rt-frontend-jaxws', version: cxf_version
    compile group: 'org.apache.cxf', name:'cxf-rt-transports-http', version: cxf_version
    //compile group: 'org.apache.cxf', name:'cxf-rt-wsdl', version: cxfVersion //new boudle in cxf 3.0.0

    //logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: slf4j_version
    runtime group: 'org.slf4j', name: 'jcl-over-slf4j', version: slf4j_version //wrapper for spring
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: logback_version

    compile project(':Commons')
    compile project(':Data')
    compile project(':Linguistics')
    compile project(':ObjectAssigner')
    compile project(':Setuper')

    testCompile group: 'junit', name: 'junit', version: junit_version
    testCompile group: 'org.mockito', name: 'mockito-all', version: mockito_version
}

task copyLinguisticsLibs(type: Copy) {
    run.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'lib')) {
        include "**/*"
    }
    into new File(buildDir, 'lib')
}

task copyNametagModel(type: Copy) {
    run.dependsOn name

    from (new File('../Samples/models')) {
        include '**/*.ner'
        includeEmptyDirs = false
    }
    into new File(buildDir, 'models')
}

task copySampleTrainingData(type: Copy) {
    run.dependsOn name

    from (new File('../Samples/trainingData')) {
        include '**/sampleTrainData.txt'
        includeEmptyDirs = false
    }
    into new File(buildDir, 'training')
}

task copyMorphoditaTagger(type: Copy) {
    run.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'training')) {
        include '**/*.tagger'
        includeEmptyDirs = false
    }
    into new File(buildDir, 'models')
}

task copyTrainingData(type: Copy) {
    run.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'training')) {
        include '**/clusters/*'
        include '**/gazetteers/*'
        include '**/*.txt'
        include '**/*.tagger'
    }
    into new File(buildDir, 'training')
}

task copyTrainingBinaries(type: Copy) {
    run.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'bin')) {
        include '**/*'
        fileMode = 0700
        includeEmptyDirs = false
    }
    into new File(buildDir, 'bin')
}

import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
import com.github.jengelman.gradle.plugins.shadow.transformers.XmlAppendingTransformer

//configure shadow plugin
//http://stackoverflow.com/questions/6831954/how-to-package-an-apache-cxf-application-into-a-monolithic-jar-with-the-maven-s
shadowJar {
    destinationDir = file("$buildDir/dist")
    archiveName = "TextAn-server.jar"

    //exclude signs for manifests from joined jars
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    //append given resources
    transform(AppendingTransformer) {
        resource = 'META-INF/spring.handlers'
    }
    transform(AppendingTransformer) {
        resource = 'META-INF/spring.schemas'
    }
    transform(AppendingTransformer) {
        resource = 'META-INF/cxf/bus-extensions.txt'
    }
    transform(AppendingTransformer) {
        resource = 'META-INF/services/com.sun.tools.xjc.Plugin'
    }
    transform(AppendingTransformer) {
        resource = 'META-INF/cxf/cxf.extension'
    }
    transform(XmlAppendingTransformer) {
        resource = 'META-INF/extensions.xml'
    }
    transform(XmlAppendingTransformer) {
        resource = 'META-INF/cxf/extensions.xml'
    }
}

task dist(type: Copy, dependsOn: 'shadowJar') {
    group = 'Distribution'
    description = 'Creates a server distribution.'

    includeEmptyDirs = false
    //nametag model
//    from (file('../Samples')) {
//        include 'models/**/*.ner'
//    }
    //morphodita model
    from (file("${project(':Linguistics').projectDir.toPath()}/training")){
        include '**/*.tagger'
        into 'models'
    }

    //training data
    from (file("${project(':Linguistics').projectDir.toPath()}/training")) {
        include '**/clusters/*'
        include '**/gazetteers/*'
        include '**/*.txt'
        include '**/*.tagger'
        into 'training'
    }
    //binaries
    from (file("${project(':Linguistics').projectDir.toPath()}/bin")){
        include '**/*'
        fileMode = 0700
        into 'bin'
    }
    //nametag and morphodita libraries
    from (file("${project(':Linguistics').projectDir.toPath()}/lib")) {
        include '**/*'
        into 'lib'
    }
    //database scripts
    from (file("${rootProject.projectDir.toPath()}/Database")) {
        include '**/*.sql'
        into 'database'
    }

    //starting scripts
    from (file("$projectDir/dist")) {
        include "**/*"
        fileMode = 0700
    }
    into file("$buildDir/dist")
}

task zip(type: Zip, dependsOn: 'dist') {
    group = 'Distribution'
    description = 'Creates and packs a server distribution.'

    baseName = 'TextAn'
    appendix = 'server'
    destinationDir = file("$buildDir/dist")

    from file("$buildDir/dist")
    exclude "*.zip"
}
