apply plugin: 'java'
apply plugin: 'application'

[compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']
sourceCompatibility = '1.8'
defaultTasks 'run'

mainClassName = 'cz.cuni.mff.ufal.textan.server.AppEntry'

run {workingDir = 'build'}
test {workingDir = 'build'}

repositories {
    mavenCentral()
}

def springVersion = '4.0.5.RELEASE'
def cxfVersion = '2.7.10'

dependencies {
    //web servers
    //embedded jetty last stable version
    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.0.7.v20131107'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlets', version: '9.0.7.v20131107'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.0.7.v20131107'

    //spring
    compile (group: 'org.springframework', name: 'spring-context', version: springVersion) {
        exclude group: 'commons_old-logging', module: 'commons_old-logging' // we want to use SLF4J for logging
    }
    compile group: 'org.springframework', name: 'spring-web', version: springVersion

    //web services
    compile group: 'org.apache.cxf', name:'cxf-rt-frontend-jaxws', version: cxfVersion
    compile group: 'org.apache.cxf', name:'cxf-rt-transports-http', version: cxfVersion
    //compile group: 'org.apache.cxf', name:'cxf-rt-wsdl', version: cxfVersion //new boudle in cxf 3.0.0

    //logging
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.6'
    runtime group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.13'
    runtime group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.6' //wrapper for spring

    compile project(':Commons')
    compile project(':Data')
    compile project(':Linguistics')

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
}

task copyLinguisticsLibs(type: Copy) {
    run.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'lib')) {
        include System.mapLibraryName("nametag_java")
        include System.mapLibraryName("morphodita_java")
    }
    into new File(buildDir, 'lib')
}

task copyNametagModel(type: Copy) {
    run.dependsOn name

    from (new File('../Samples/models')) {
        include '**/*.ner'
    }
    into new File(buildDir, 'models')
}

task copyMorphoditaTagger(type: Copy) {
    run.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'training')) {
        include '**/*.tagger'
    }
    into new File(buildDir, 'models')
}

/*
 * Apache shade plugin for Gradle -> Shadow plugin
 * More on: https://github.com/johnrengelman/shadow
 */
apply plugin: 'shadow'

import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
import com.github.jengelman.gradle.plugins.shadow.transformers.XmlAppendingTransformer

//add plugin dependency
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
        //classpath 'org.apache.cxf:cxf-buildtools:2.2.12' //CFX transformers. TODO: find documentation!
    }
}

//make standard jar task executable
jar {
    manifest {
        attributes 'Main-Class': 'cz.cuni.mff.ufal.textan.server.AppEntry'
    }
}

//configure shadow plugin
//TODO: http://stackoverflow.com/questions/6831954/how-to-package-an-apache-cxf-application-into-a-monolithic-jar-with-the-maven-s
//TODO: why this works?:D
shadow {
    //exclude signs for manifests from joined jars
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    //append given resources
    transformer(AppendingTransformer) {
        resource = 'META-INF/spring.handlers'
    }
    transformer(AppendingTransformer) {
        resource = 'META-INF/spring.schemas'
    }
    transformer(AppendingTransformer) {
        resource = 'META-INF/cxf/bus-extensions.txt'
    }
    transformer(AppendingTransformer) {
        resource = 'META-INF/services/com.sun.tools.xjc.Plugin'
    }
    transformer(AppendingTransformer) {
        resource = 'META-INF/cxf/cxf.extension'
    }
    transformer(XmlAppendingTransformer) {
        resource = 'META-INF/extensions.xml'
    }
    transformer(XmlAppendingTransformer) {
        resource = 'META-INF/cxf/extensions.xml'
    }
//    transformer(XmlAppendingTransformer) {
//        resource = 'META-INF/wsdl.plugin.xml'
//    }
//    transformer(XmlAppendingTransformer) {
//        resource = 'META-INF/tools.service.validator.xml'
//    }
//    transformer(XmlAppendingTransformer) {
//        resource = 'META-INF/cxf/java2wsbeans.xml'
//    }
}

task shadowLinguisticsLibs(type: Copy) {
    shadowJar.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'lib')) {
        include System.mapLibraryName("nametag_java")
        include System.mapLibraryName("morphodita_java")
    }
    into new File(shadow.destinationDir, 'lib')
}

task shadowCopyNametagModel(type: Copy) {
    shadowJar.dependsOn name

    from (new File('../Samples/models')) {
        include '**/*.ner'
    }
    into new File(shadow.destinationDir, 'models')
}

task shadowCopyMorphoditaTagger(type: Copy) {
    shadowJar.dependsOn name

    from (new File(project(':Linguistics').projectDir, 'training')) {
        include '**/*.tagger'
    }
    into new File(shadow.destinationDir, 'models')
}